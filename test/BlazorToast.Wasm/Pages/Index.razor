@page "/"

@inject IToastService Toasts

<h1>Hello, world!</h1>

<div class="row">
    <div class="col-md">
        <div class="form-group">
            <label for="title">Notification Title</label>
            <input type="text" class="form-control" id="title" placeholder="Enter Title..." @bind="title" />
            <small class="form-text text-muted">The title will show up at the top of the notification.</small>
        </div>
        <div class="form-group">
            <label for="title">Notification Body</label>
            <input type="text" class="form-control" id="body" placeholder="Enter Body..." @bind="body" />
            <small class="form-text text-muted">The body will show up below the title.</small>
        </div>
        <div class="form-group">
            <label for="title">Notification Icon</label>
            <input type="text" class="form-control" id="icon" placeholder="Enter Icon..." @bind="icon" />
            <small class="form-text text-muted">The Icon of the notification, loaded from wwwroot/images/</small>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-auto mr-auto"></div>
    <div class="col-auto">
        <button type="button" class="btn btn-primary" disabled="@(!CanRequestPermission())" @onclick="RequestPermission">Request permission</button>
    </div>
    <div class="col-auto mr-auto"></div>
    <div class="col-auto">
        <button type="button" class="btn btn-primary" disabled="@(!CanCreateNotification())" @onclick="CreateNotification">Create Notification</button>
    </div>
</div>

@code {
    private NotificationPermission? permission;
    private string? title;
    private string? body;
    private string? icon;
    private bool? isSupported;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isSupported = await Toasts.IsSupported();
            Console.WriteLine($"Supported: {isSupported}");

            if (isSupported.HasValue && isSupported.Value)
            {
                await RequestPermission();
            }
        }
    }

    private async Task CreateNotification()
    {
        var result = await Toasts.Create(title ?? "Title", new { body = body ?? "Body", icon = icon ?? "icon-512.png", renotify = true, tag = "my-notif" });

        Console.WriteLine($"Result: {result}");
    }

    private async Task RequestPermission()
    {
        permission = await Toasts.RequestPermission();
        Console.WriteLine($"Permission: {permission}");
        StateHasChanged();
    }

    private bool CanRequestPermission()
    {
        return (isSupported.HasValue && isSupported.Value)
            && (!permission.HasValue || (permission != NotificationPermission.granted));
    }

    private bool CanCreateNotification()
    {
        return (isSupported.HasValue && isSupported.Value)
            && (permission.HasValue && permission == NotificationPermission.granted);
    }
}